
%% EPYCYCLIC TRAJECTORY
traj3D_fig = figure('Name','Tip trajectory');
plot3(sV(1:length(alpha)),-beta,alpha,"LineWidth",1.1,'Color','#4658A9')
grid on
hold on
xlabel('Downrange [cal]')
ylabel('Yaw [deg]')
zlabel('Pitch [deg]')
if exist('sTransonic','var')
    % transonic plane
    [y,z] = meshgrid(-20:40:20); % Generate x and y data
    x = sTransonic*ones(size(y, 1)); % Generate z data
    plane = surf(x, y, z); % Plot the surface
    plane.FaceColor = "black";
    plane.FaceAlpha = 0.1;
end
if exist('sSubsonic','var')
    % subsonic plane
    [y,z] = meshgrid(-20:40:20); % Generate x and y data
    x = sSubsonic*ones(size(y, 1)); % Generate z data
    plane = surf(x, y, z); % Plot the surface
    plane.FaceColor = "blue";
    plane.FaceAlpha = 0.1;
end
ylim([min(-beta)*1.2,max(-beta)*1.2])
zlim([min(alpha)*1.2,max(alpha)*1.2])


traj3D_fig2 = figure('Name','Tip trajectory');
plot3(sV(1:length(alpha)),-beta,alpha,"LineWidth",1.1,'Color','#4658A9')
grid on
hold on
xlabel('Downrange [cal]')
ylabel('Yaw [deg]')
zlabel('Pitch [deg]')
if exist('sTransonic','var')
    % transonic plane
    [y,z] = meshgrid(-20:40:20); % Generate x and y data
    x = sTransonic*ones(size(y, 1)); % Generate z data
    plane = surf(x, y, z); % Plot the surface
    plane.FaceColor = "black";
    plane.FaceAlpha = 0.1;
end
if exist('sSubsonic','var')
    % subsonic plane
    [y,z] = meshgrid(-20:40:20); % Generate x and y data
    x = sSubsonic*ones(size(y, 1)); % Generate z data
    plane = surf(x, y, z); % Plot the surface
    plane.FaceColor = "blue";
    plane.FaceAlpha = 0.1;
end
ylim([min(-beta)*1.2,max(-beta)*1.2])
zlim([min(alpha)*1.2,max(alpha)*1.2])
view(45,30)


traj2D_fig = figure('Name','Tip trajectory - scatter');

colorMap = [linspace(176,2,100)',linspace(212,90,100)',linspace(235,160,100)']/255;

line = plot(beta,alpha);
line.HandleVisibility = 'off';
hold on
z = linspace(0,10,length(alpha));
scat = scatter(flip(beta),flip(alpha),6,z,'filled');
scat.HandleVisibility = 'off';
colormap(colorMap);

scatter(beta(1),alpha(1),25,'filled','MarkerFaceColor','green','MarkerEdgeColor','green')
scatter(beta(end),alpha(end),25,'filled','MarkerFaceColor','red','MarkerEdgeColor','red')
% plot(beta(1),alpha(1),'Marker','o','MarkerSize',5,'MarkerFaceColor','green','MarkerEdgeColor','green')
% plot(beta(end),alpha(end),'Marker','o','MarkerSize',5,'MarkerFaceColor','red','MarkerEdgeColor','red')
grid on
xlabel('Yaw [deg]')
ylabel('Pitch [deg]')
axis equal
legend('Start','End')

figure('Name','Tip trajectory')
plot(beta,alpha)
grid on
xlabel('Yaw [deg]')
ylabel('Pitch [deg]')
axis equal

%% YAW OF REPOSE
if length(Sd) > 1
    figure('Name','Yaw of repose')
    plot3(sV(1:length(alpha)),imag(betaR),real(betaR),"LineWidth",1.1,'Color','#4658A9')
    grid on
    xlabel('Downrange [cal]')
    ylabel('Yaw component [deg]')
    zlabel('Pitch component[deg]')

    betaR_fig = figure('Name','Yaw of repose vs downrange distance');
    plot(sV(1:length(alpha)),abs(betaR),'Color','#4658A9')
    grid on
    xlabel('Downrange [cal]')
    ylabel('Yaw of repose [deg]')
else
    fprintf('Yaw of repose = %0.3g deg\n', abs(betaR));
end


%% TOTAL ANGLE OF ATTACK
if length(Sd) > 1
    alphaTot_fig = figure('Name','Total angle of attack');
    plot(sV(1:length(alpha)),alphaTot(1:length(alpha)),"LineWidth",1.1,'Color','#4658A9')
    grid on
    xlabel('Downrange [cal]')
    ylabel('Total Alpha [deg]')
end

%% DEFLECTION
defBarrel_fig = figure('Name','Deflection vs Barrel twist rate');
plot(nV_inches,Def_v,'LineWidth',1.5,'Color','#4658A9')
hold on
plot(nV_inches,JA_v,'--','LineWidth',1.5,'Color','#FDAF00')
plot(nV_inches,TL_v,'--','LineWidth',1.5,'Color','#D3212D')
grid on
xlabel('Barrel Twist Rate [inches/turn]')
ylabel('Deflection [cm]')
xlim([nMin_inches,nMax_inches])
% legend('Total Deflection','Aero-Jump Deflection','Lat-Throwoff Deflection')
legend('Total Deflection w/o Drift','Aerodynamic Jump','Lateral Throw-off')

drift_fig = figure('Name','Gyroscopic Drift vs Distance');
plot(DR*d*1e2, sV*d,'Color','#4658A9')
hold on
plot(DR(end)*d*1e2, sV(end)*d,'x','MarkerSize',12,'MarkerEdgeColor','black','MarkerFaceColor','black','LineWidth',1.2)
annotation('textbox',...
    [0.2 0.76 0.32 0.07],...
    'String',{['Drift at target = ' num2str(DR(end)*d*1e2,'%.2f') 'cm']},...
    'FontSize',10,...
    'FontName','Arial',...
    'LineStyle','-',...
    'EdgeColor',[0 0 0],...
    'LineWidth',1,...
    'BackgroundColor',[0.95  0.95 0.95],...
    'Color',[0 0 0]);
grid on
xlabel('Drift [cm]')
ylabel('Downrange distance [m]')

%% STABILITY DIAGRAM
SdVec = linspace(0,2,1000);
SgVec = 1./(SdVec.*(2-SdVec));

colorMap = [linspace(2,176,100)',linspace(90,212,100)',linspace(160,235,100)']/255;
stab_fig = figure('Name','Stability factors');
plot(SdVec,SgVec,'LineWidth',1.5)
hold on
colormap(colorMap);
z = linspace(0,10,length(Sd));
scatter(Sd,Sg,[],z,'filled')
% plot(Sd,Sg,'Marker','.','MarkerSize',20);
grid on
if max(Sg) < 6
    ylim([0,6])
else
    ylim([0,max(Sg)*1.1])
end
xlim([0,2])
xlabel('Sd, dynamic stability factor')
ylabel('Sg, gyro stability factor')
text(1,4,'Stable Region','HorizontalAlignment','center')
text(0.4,0.5,'Slow mode unstable','HorizontalAlignment','center')
text(1.6,0.5,'Fast mode unstable','HorizontalAlignment','center')


if length(Sd) == 1
    annotation('textbox',...
        [0.2 0.76 0.15 0.11],...
        'String',{['Sg =' num2str(Sg,'%.2f')],['Sd =' num2str(Sd,'%.2f')]},...
        'FontSize',10,...
        'FontName','Arial',...
        'LineStyle','-',...
        'EdgeColor',[0 0 0],...
        'LineWidth',1,...
        'BackgroundColor',[0.9  0.9 0.9],...
        'Color',[0 0 0]);
end

if length(Sd) > 1
    figure('Name','Speed over downrange')
    plot(sV(1:length(v)),v)
    grid on
    xlabel('Downrange [cal]')
    ylabel('Speed [m/s]')

    machCoeff_fig = figure('Name','Coeffs and Mach over downrange');
    yyaxis left
    plot(sV(1:length(Ma)),Ma,'Color','#4658A9')
    ylabel('Mach [-]')
    yyaxis right
    plot(sV(1:length(CD_V)),CD_V/adim,'-','Color','#D3212D')
    hold on
    plot(sV(1:length(CLa_V)),CLa_V/adim,'--','Color','#D3212D')
    ylabel('Coeffs [-]')
    xlabel('Downrange [cal]')
    grid on
    xlim([0,sMax])
    legend('Mach number','CD','CL$_{\alpha}$')
    fprintf('|| Minimum Sg = %0.2f ||\n',min(Sg))
    fprintf('|| Maximum Sg = %0.2f ||\n',max(Sg))
    fprintf('|| Minimum Sd = %0.2f ||\n',min(Sd))
    fprintf('|| Maximum Sd = %0.2f ||\n',max(Sd))
end

%% ANIMATION
if flags.Animation

    if startPoint == 0
        startIndex = 1;
    else
        startIndex = startPoint/100 * length(alpha);
    end

    maxPitchDispl = max(amp*deg2rad(alpha(startIndex:end)))*L + margine;
    maxYawDispl = max(amp*deg2rad(beta(startIndex:end)))*L + margine;

    if flags.LowRes
        % LOW RESOLUTION ANIMATION
        f = figure();
        sl = surf(Z,Y,X);
        sl.FaceAlpha = 0.55;
        sl.FaceColor = "black";
        sl.EdgeAlpha = 1;
        obj = sl;
        axis equal
        xlabel('x')
        view(-129,17)

        ylim([-maxYawDispl, maxYawDispl])
        zlim([-maxPitchDispl, maxPitchDispl])

        if flags.videoExport
            animationFileName = strcat(projectile,'.mp4');
            vidfile = VideoWriter(animationFileName,'MPEG-4');
            open(vidfile);
        end
        for j = startIndex:round(speed):length(alpha)

            if j == startIndex
                deltaAlpha = alpha(j);
                deltaBeta = beta(j);
            else
                deltaAlpha = alpha(j) - alpha(j-round(speed));
                deltaBeta = beta(j) - beta(j-round(speed));
            end

            if Ma(j) >= 1.2
                set(f.Children.Title,'String','Supersonic','Color','Red');
            elseif Ma(j) < 1.2 && Ma(j) > 0.85
                set(f.Children.Title,'String','Transonic','Color',"#D95319");
            else
                set(f.Children.Title,'String','Subsonic','Color','black');
            end

            rotate(obj,[0,1,0],deltaAlpha*amp);
            rotate(obj,[0,0,1],deltaBeta*amp);

            pause(0.0005)
            if flags.videoExport
                if exist(animationFileName,'file') && j == startIndex
                    error("The video file already exists, change the file name in MAIN.m")
                end
                if floor(i/3) == i/3
                    frame = getframe(f);
                    writeVideo(vidfile, frame);
                    %                     exportgraphics(f,animationFileName,'Append',true,'Resolution',120);
                end
            end
        end
        if flags.videoExport
            close(vidfile)
        end
    else
        % ANIMATION WITH LIGHTNING
        f = figure();
        s = [-45 170];
        k = [0.6 .5 .6 5];
        sl = surfl(Z,Y,X,s,k,'light');
        sl(2).Color = 'w';
        sl(1).EdgeColor = 'none';
        sl(1).FaceColor = '#af7045';
        obj = sl(1);
        axis equal
        xlabel('x')
        view(-129,17)
        % round(2/3*length(alpha)):2

        ylim([-maxYawDispl, maxYawDispl])
        zlim([-maxPitchDispl, maxPitchDispl])

        i = 0;
        if flags.videoExport
            animationFileName = strcat(projectile,'.mp4');
            vidfile = VideoWriter(animationFileName,'MPEG-4');
            open(vidfile);
        end
        for j = startIndex:round(speed):length(alpha)
            i = i + 1;
            if j == startIndex
                deltaAlpha = alpha(j);
                deltaBeta = beta(j);
            else
                deltaAlpha = alpha(j) - alpha(j-round(speed));
                deltaBeta = beta(j) - beta(j-round(speed));
            end

            if Ma(j) >= 1.2
                set(f.Children.Title,'String','Supersonic','Color','Red');
            elseif Ma(j) < 1.2 && Ma(j) > 0.85
                set(f.Children.Title,'String','Transonic','Color',"#D95319");
            else
                set(f.Children.Title,'String','Subsonic','Color','black');
            end

            rotate(obj,[0,1,0],deltaAlpha*amp);
            rotate(obj,[0,0,1],deltaBeta*amp);

            pause(0.0005)
            if flags.videoExport

                if exist(animationFileName,'file') && j == startIndex
                    error("The video file already exists, change the file name in MAIN.m")
                end
                if floor(i/3) == i/3
                    frame = getframe(f);
                    writeVideo(vidfile, frame);
                    %                     exportgraphics(f,animationFileName,'Append',true,'Resolution',120);
                end
            end
        end
    end
    if flags.videoExport
        close(vidfile)
    end
end

%% VALUE FOR TABLE
% 1/twistRateInch
% rad2deg(eps)
% sMax_metres
% 0
% rad2deg(deltaMax)
% p(1)*60/(2*pi)
% p(end)*60/(2*pi)
% v(1)
% v(end)
% Ma(1)
% Ma(end)
% Sg(1)
% Sg(end)
% Sd(1)
% Sd(end)
% alphaTot(end)
% norm(betaR(1))
% norm(betaR(end))
% norm(JA)*sMax_metres*1e2
% norm(TL)*sMax_metres*1e2
% DR(end)*d*1e2
% Deflection(end)
%% PDF EXPORT
% traj3D_fig
% traj2D_fig
% alphaTot_fig
% stab_fig
% machCoeff_fig
% defBarrel_fig
% drift_fig

dim2 = 0.5;
dim = 0.9;

exportStandardizedFigure3D(traj3D_fig,strcat('traj3D_',projectile),dim2,'overwriteFigure',true,...
    'figurePath',strcat(projectile,'_fig'),'addMarkers',false,'changeColors',false)

exportStandardizedFigure3D(traj3D_fig2,strcat('traj3D2_',projectile),dim2,'overwriteFigure',true,...
    'figurePath',strcat(projectile,'_fig'),'addMarkers',false,'changeColors',false)

exportStandardizedFigure(traj2D_fig,strcat('traj2D_',projectile),dim2,'overwriteFigure',true,...
    'figurePath',strcat(projectile,'_fig'),'addMarkers',false,'changeColors',false)

exportStandardizedFigure(alphaTot_fig,strcat('alphaTot_',projectile),dim,'overwriteFigure',true,...
    'figurePath',strcat(projectile,'_fig'),'addMarkers',false,'changeColors',false)

exportStandardizedFigure(stab_fig,strcat('stab_',projectile),dim2,'overwriteFigure',true,...
    'figurePath',strcat(projectile,'_fig'),'addMarkers',false,'changeColors',false)

exportStandardizedFigure(defBarrel_fig,strcat('defBarrel_',projectile),dim2,'overwriteFigure',true,...
    'figurePath',strcat(projectile,'_fig'),'addMarkers',false,'changeColors',false)

exportStandardizedFigure(drift_fig,strcat('drift_',projectile),dim2,'overwriteFigure',true,...
    'figurePath',strcat(projectile,'_fig'),'addMarkers',false,'changeColors',false)

exportStandardizedFigure(machCoeff_fig,strcat('machCoeff_',projectile),dim2,'overwriteFigure',true,...
    'figurePath',strcat(projectile,'_fig'),'addMarkers',false,'changeColors',false,'changeLineStyle',true)

% projectile geometry
% showProjectile;
% 
% exportStandardizedFigure(Projectile3D,strcat('3Dgeom_',projectile),dim2,'overwriteFigure',true,...
%     'figurePath',strcat(projectile,'_fig'),'addMarkers',false,'changeColors',false,'changeLineStyle',false)
% 
% exportStandardizedFigure(Projectile2D,strcat('2Dgeom_',projectile),dim2,'overwriteFigure',true,...
%     'figurePath',strcat(projectile,'_fig'),'addMarkers',false,'changeColors',false,'changeLineStyle',false)